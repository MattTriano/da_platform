#
# Licensed to the Apache Software Foundation (ASF) under one or more
# contributor license agreements.  See the NOTICE file distributed with
# this work for additional information regarding copyright ownership.
# The ASF licenses this file to You under the Apache License, Version 2.0
# (the "License"); you may not use this file except in compliance with
# the License.  You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
version: "3.9"


x-airflow-common: &airflow-common
  build:
    context: ./airflow
    dockerfile: airflow.Dockerfile
  env_file:
    - .env.airflow
  environment: &airflow-common-env
    AIRFLOW__CORE__EXECUTOR: CeleryExecutor
    AIRFLOW__CORE__DAGS_ARE_PAUSED_AT_CREATION: true
    AIRFLOW__CORE__LOAD_EXAMPLES: false
    AIRFLOW__API__AUTH_BACKENDS: 'airflow.api.auth.backend.basic_auth,airflow.api.auth.backend.session'
    _PIP_ADDITIONAL_REQUIREMENTS: ${_PIP_ADDITIONAL_REQUIREMENTS:-}
  volumes:
    - ./platform/dags:/opt/airflow/dags
    - ./logs/airflow:/opt/airflow/logs
    - ./platform/airflow/plugins:/opt/airflow/plugins
  user: "${AIRFLOW_UID:-50000}:0"
  networks:
    - dap_net
  depends_on: &airflow-common-depends-on
    airflow_db:
      condition: service_healthy


x-superset-common: &superset-common
  build:
    context: ./superset
    dockerfile: superset.Dockerfile
  networks:
    - dap_net
  env_file:
    - .env.superset
  environment:
    SUPERSET_LOAD_EXAMPLES: true
    REDIS_HOST: redis
    REDIS_PORT: 6379
  depends_on: &superset-common-depends-on
    redis:
      condition: service_healthy
    ss_db:
      condition: service_healthy

services:
  airflow-webserver:
    <<: *airflow-common
    image: dap_airflow_webserver:2.8.0
    command: webserver
    ports:
      - "8080:8080"
    healthcheck:
      test:
        [
          "CMD",
          "curl",
          "--fail",
          "http://127.0.0.1:8080/health"
        ]
      interval: 10s
      timeout: 10s
      retries: 5
    restart: always
    depends_on:
      <<: *airflow-common-depends-on
      airflow-init:
        condition: service_completed_successfully

  airflow-scheduler:
    <<: *airflow-common
    image: dap_airflow_scheduler:2.8.0
    command: scheduler
    healthcheck:
      test:
        [
          "CMD-SHELL",
          'airflow jobs check --job-type SchedulerJob --hostname "$${HOSTNAME}"'
        ]
      interval: 10s
      timeout: 10s
      retries: 5
    restart: always
    ports:
      - "18888:18888"
    depends_on:
      <<: *airflow-common-depends-on
      airflow-init:
        condition: service_completed_successfully

  airflow-triggerer:
    <<: *airflow-common
    image: dap_airflow_triggerer:2.8.0
    command: triggerer
    healthcheck:
      test:
        [
          "CMD-SHELL",
          'airflow jobs check --job-type TriggererJob --hostname "$${HOSTNAME}"'
        ]
      interval: 10s
      timeout: 10s
      retries: 5
    restart: always
    depends_on:
      <<: *airflow-common-depends-on
      airflow-init:
        condition: service_completed_successfully

  airflow_db:
    image: dap_af_pg:16.1
    build:
      context: ./airflow
      dockerfile: postgres.Dockerfile
    shm_size: 4gb
    env_file:
      - .env.airflow
    networks:
      - dap_net
    ports:
      - "5432:5432"
    volumes:
      - dap_af_db_vol:/var/lib/postgresql/data/
    healthcheck:
      test:
        [
          "CMD",
          "pg_isready",
          "-d",
          "${POSTGRES_DB}",
          "-U",
          "${POSTGRES_USER}"
        ]
      interval: 5s
      retries: 5
    restart: always

  airflow-worker:
    <<: *airflow-common
    command: celery worker
    healthcheck:
      # yamllint disable rule:line-length
      test:
        - "CMD-SHELL"
        - 'celery --app airflow.providers.celery.executors.celery_executor.app inspect ping -d "celery@$${HOSTNAME}" || celery --app airflow.executors.celery_executor.app inspect ping -d "celery@$${HOSTNAME}"'
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    environment:
      <<: *airflow-common-env
      # Required to handle warm shutdown of the celery workers properly
      # See https://airflow.apache.org/docs/docker-stack/entrypoint.html#signal-propagation
      DUMB_INIT_SETSID: "0"
    restart: always
    depends_on:
      <<: *airflow-common-depends-on
      airflow-init:
        condition: service_completed_successfully


  airflow-init:
    <<: *airflow-common
    image: dap_airflow_init:2.8.0
    entrypoint: /bin/bash
    # yamllint disable rule:line-length
    command:
      - -c
      - |
        function ver() {
          printf "%04d%04d%04d%04d" $${1//./ }
        }
        mkdir -p /sources/logs /sources/dags /sources/plugins
        chown -R "${AIRFLOW_UID}:0" /sources/{logs,dags,plugins}
        exec /entrypoint airflow version
    # yamllint enable rule:line-length
    environment:
      <<: *airflow-common-env
      _AIRFLOW_DB_UPGRADE: 'true'
      _AIRFLOW_WWW_USER_CREATE: 'true'
      _AIRFLOW_WWW_USER_USERNAME: ${_AIRFLOW_WWW_USER_USERNAME:-airflow}
      _AIRFLOW_WWW_USER_PASSWORD: ${_AIRFLOW_WWW_USER_PASSWORD:-airflow}
      _PIP_ADDITIONAL_REQUIREMENTS: ''
    user: "0:0"
    volumes:
      - ./platform:/sources

  airflow-cli:
    <<: *airflow-common
    image: dap_airflow_cli:2.8.0
    profiles:
      - debug
    environment:
      <<: *airflow-common-env
      CONNECTION_CHECK_MAX_COUNT: "0"
    # Workaround for entrypoint issue. See: https://github.com/apache/airflow/issues/16252
    command:
      - bash
      - -c
      - airflow

  superset:
    <<: *superset-common
    image: dap_superset:3.1.0rc3-py310
    command: [ "/app/docker/docker-bootstrap.sh", "app-gunicorn" ]
    restart: unless-stopped
    ports:
      - "8088:8088"
    depends_on:
      <<: *superset-common-depends-on
      ss_init:
        condition: service_completed_successfully
    volumes:
      - dap_ss_core_vol:/app/superset_home

  ss_db:
    image: dap_ss_db:16.1
    build:
      context: ./superset
      dockerfile: postgres.Dockerfile
    env_file:
      - .env.superset
    networks:
      - dap_net
    ports:
      - "5442:5432"
    volumes:
      - dap_ss_db_vol:/var/lib/postgresql/data/
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "pg_isready -h ss_db -d $${POSTGRES_DB} -U $${POSTGRES_USER}"
        ]
      interval: 5s
      retries: 5
    restart: always

  ss_init:
    <<: *superset-common
    command: [ "/app/docker/docker-init.sh" ]
    depends_on:
      - redis
      - ss_db
    volumes:
      - dap_ss_core_vol:/app/superset_home
    healthcheck:
      disable: true

  redis:
    image: dap_redis:7.2.3
    build:
      context: ./redis
      dockerfile: redis.Dockerfile
    ports:
      - "6379:6379"
    volumes:
      - dap_redis_vol:/data
    networks:
      - dap_net
    restart: unless-stopped
    healthcheck:
      test: [ "CMD", "redis-cli", "ping" ]
      interval: 5s
      timeout: 30s
      retries: 50


networks:
  dap_net:

volumes:
  dap_af_db_vol:
  dap_redis_vol:
  dap_ss_core_vol:
  dap_ss_db_vol:

